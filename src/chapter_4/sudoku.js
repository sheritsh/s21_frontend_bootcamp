// Вам нужно написать функцию для решения Судоку.
// Функция принимает один аргумент - строку, в ней на месте пропущенных цифр стоят -.
// Функция должна вернуть строку, в которой все значения будут заполнены.

// Давайте сыграем в настоящую головоломку Судоку, обращая внимание на то,
// как мы приближаемся к решению поставленной задачи.
// - Какие стратегии мы принимаем и почему?
// - Как мы выбираем, с чего начать?
// - Как мы узнаем, когда действительно следует поставить число в клетку?
// - Что мы делаем, когда мы окончательно не знаем, как заполнить остальные клетки?
// Размышляя о нашей человеческой стратегии, важно понимать, что иногда стратегии,
// которые работают для людей, будет трудно реализовать на компьютере.
// Однако верно и обратное: стратегии компьютера могут быть не всегда удобны для людей,
// потому что нам придется писать слишком много текста, использовать слишком много листов
// бумаги или помнить много информации, которую в состоянии запомнить компьютер, но не человек.
// Обязательно напишите метод `prettyBoard`, который берет доску, записанную в строчку и возвращает
// отформатированный вариант, более привычный для нашего визуального восприятия. Например:

// ```
// 1 - 5 8 - 2 - - -
// - 9 - - 7 6 4 - 5
// 2 - - 4 - - 8 1 9
// - 1 9 - - 7 3 - 6
// 7 6 2 - 8 3 - 9 -
// - - - - 6 1 - 5 -
// - - 7 6 - - - 3 -
// 4 3 - - 2 - 5 - 1
// 6 - - 3 - 8 9 - -
// ```;

const SECTION_SIZE = 9;
const ROW_SIZE = 3;

const prettyBoard = (sudokuValues) => {
  const resArr = [];

  resArr.push('-------------------------');

  for (let i = 0; i < 9; i += 1) {
    const row = sudokuValues[i].join(' ');

    resArr.push(`| ${row.slice(0, 5)} | ${row.slice(6, 11)} | ${row.slice(12, 17)} |`);

    if ((i + 1) % 3 === 0 && i !== 8) {
      resArr.push('|-------+-------+-------|');
    }
  }

  resArr.push('-------------------------');

  console.log(resArr.join('\n'));
};

const createSudokuBoard = (inputString) => {
  const sudokuValues = [];

  for (let i = 0; i < inputString.length; i += SECTION_SIZE) {
    sudokuValues.push(inputString.slice(i, i + SECTION_SIZE).split(''));
  }

  return sudokuValues;
};

const findEmptyCell = (board) => {
  for (let row = 0; row < SECTION_SIZE; row += 1) {
    for (let col = 0; col < SECTION_SIZE; col += 1) {
      if (board[row][col] === '-') {
        return [row, col];
      }
    }
  }

  return null;
};

const isValidTurn = (val, pos, board) => {
  const [row, col] = pos;

  for (let i = 0; i < SECTION_SIZE; i += 1) {
    if (board[row][i] === val || board[i][col] === val) {
      return false;
    }
  }

  const sectionRowStart = row - (row % ROW_SIZE);
  const sectionColStart = col - (col % ROW_SIZE);

  for (let i = sectionRowStart; i < sectionRowStart + ROW_SIZE; i += 1) {
    for (let j = sectionColStart; j < sectionColStart + ROW_SIZE; j += 1) {
      if (board[i][j] === val) {
        return false;
      }
    }
  }

  return true;
};

const solveSudoku = (inputString) => {
  const sudokuBoard = createSudokuBoard(inputString);

  const solve = () => {
    const emptyCell = findEmptyCell(sudokuBoard);

    if (!emptyCell) {
      return true;
    }

    const [row, col] = emptyCell;

    for (let num = 1; num <= SECTION_SIZE; num += 1) {
      const numStr = num.toString();

      if (isValidTurn(numStr, [row, col], sudokuBoard)) {
        sudokuBoard[row][col] = numStr;

        if (solve()) {
          return true;
        }

        sudokuBoard[row][col] = '-';
      }
    }

    return false;
  };

  solve();
  prettyBoard(sudokuBoard);
  return sudokuBoard.flat().join('');
};

// Ниже представленны тестовые данные для вашей функции, они имеют 3 уровня сложности.
// * Пять головоломок могут быть решены с помощью базовой логики.
// * Пять требуют немного более продвинутой логики.
// * Пять требуют от вашего решателя умения угадывать и перерешивать, если зашёл в тупик.

// solveSudoku("1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--");
// solveSudoku("--5-3--819-285--6-6----4-5---74-283-34976---5--83--49-15--87--2-9----6---26-495-3");
// solveSudoku("29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9");
// solveSudoku("-8--2-----4-5--32--2-3-9-466---9---4---64-5-1134-5-7--36---4--24-723-6-----7--45-");
// solveSudoku("6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--");
// solveSudoku("---6891--8------2915------84-3----5-2----5----9-24-8-1-847--91-5------6--6-41----");
// solveSudoku("-3-5--8-45-42---1---8--9---79-8-61-3-----54---5------78-----7-2---7-46--61-3--5--");
// solveSudoku("-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7");
// solveSudoku("----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----");
// solveSudoku("3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--");
// solveSudoku("3-26-9--55--73----------9-----94----------1-9----57-6---85----6--------3-19-82-4-");
// solveSudoku("-2-5----48-5--------48-9-2------5-73-9-----6-25-9------3-6-18--------4-71----4-9-");
// solveSudoku("--7--8------2---6-65--79----7----3-5-83---67-2-1----8----71--38-2---5------4--2--");
// solveSudoku("----------2-65-------18--4--9----6-4-3---57-------------------73------9----------");
// solveSudoku("---------------------------------------------------------------------------------");
